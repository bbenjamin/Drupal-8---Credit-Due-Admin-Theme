<?php

/**
 * @file
 * Functions to support theming in the credit_due theme.
 */

use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

require_once 'inc/forms.inc';

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function credit_due_preprocess_html(array &$variables) {
  $variables['attributes']['class'][] = 'creditdue';
}

/**
 * Implements hook_page_attachments_alter().
 */
function credit_due_page_attachments_alter(array &$page) {

}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function credit_due_preprocess_page(array &$variables) {
  $menu_name = 'admin';

  // Find the menu item corresponding to the entity (node).
  $menu_link_service = \Drupal::getContainer()->get('plugin.manager.menu.link');
  $menu_links = $menu_link_service->loadLinksByRoute('system.admin', [], $menu_name);
  if (!empty($menu_links)) {
    // We found a menu link so we can continue with generating the tree.
    // First, setup the parameters: we need one level starting with the menu
    // link we found, but excluding it from the tree.
    $root_menu_item = reset($menu_links);
    $menu_parameters = new MenuTreeParameters();
    $menu_parameters->setMaxDepth(2);
    $menu_parameters->setMinDepth(2);
    $menu_parameters->setRoot($root_menu_item->getPluginId());
    $menu_parameters->excludeRoot();

    // Get the tree.
    $menu_tree_service = \Drupal::service('menu.link_tree');
    $tree = $menu_tree_service->load($menu_name, $menu_parameters);

    // Apply some manipulators (checking the access, sorting).
    $manipulators = [
      ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
      ['callable' => 'menu.default_tree_manipulators:checkAccess'],
      ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
    ];
    $tree = $menu_tree_service->transform($tree, $manipulators);
    $leftnav_render_array = $menu_tree_service->build($tree);
    $sidebar_cts = credit_due_content_types_for_sidebar();

    foreach ($sidebar_cts as $ct) {
      $leftnav_render_array['#items']['system.admin_content.' . $ct->id()] = [
        'attributes' => new Attribute(),
        'title' => $ct->label(),
        'below' => [],
        'url' => Url::fromRoute('system.admin_content', [], [
          'query' => [
            'type' => $ct->id(),
          ],
        ]),

      ];
    }
    $items = $leftnav_render_array['#items'];
    // Sort so content is first, and content types immediately follow.
    uksort($items, function ($a, $b) {
      if (strpos($a, 'system.admin_content') !== FALSE && strpos($b, 'system.admin_content') !== FALSE) {
        if ($a === 'system.admin_content') {
          return 0;
        }
        return 1;
      }
      elseif (strpos($a, 'system.admin_content') !== FALSE && strpos($b, 'system.admin_content') === FALSE) {
        return -1;
      }
      return 1;
    });
    $leftnav_render_array['#items'] = $items;

    $variables['page']['content']['adminmenu'] = $leftnav_render_array;
    $variables['page']['content']['adminmenu']['#attributes']['id']['credit-admin-nav'];
    $variables['page']['content']['adminmenu']['#id'] = 'creditdue-left-nav';
    $variables['page']['content']['adminmenu']['#prefix'] = '<div id="creditdue-admin-nav">';
    $variables['page']['content']['adminmenu']['#suffix'] = '</div>';
  }
}

/**
 * Returns an array of content types that are configured to appear in sidebar.
 */
function credit_due_content_types_for_sidebar() {
  $contentTypes = \Drupal::service('entity.manager')->getStorage('node_type')->loadMultiple();

  $contentTypesList = [];
  foreach ($contentTypes as $contentType) {
    $ct_theme_settings = $contentType->getThirdPartySetting('credit_due', 'credit_due_ct_config');
    if (isset($ct_theme_settings['show_left_sidebar']) && $ct_theme_settings['show_left_sidebar'] == 0) {
      continue;
    }
    $contentTypesList[$contentType->id()] = $contentType;
  }
  return array_reverse($contentTypesList);
}

/**
 * Implements hook_preprocess_menu() for menu.html.twig.
 */
function credit_due_preprocess_menu(&$variables, $hook) {
  if ($hook == 'menu__admin') {
    $current_uri = \Drupal::request()->getRequestUri();
    $uri_pieces = explode("/", $current_uri);
    $depth = count($uri_pieces);
    $parent_trail = '';
    $subparent_trail = '';
    if ($depth > 4) {
      $parent_trail = implode("/", array_splice($uri_pieces, 0, 3));
      if (!empty($uri_pieces[0])) {
        $subparent_trail = $parent_trail . '/' . $uri_pieces[0];
      }
    }
    $variables['items']['system.admin_reports']['weight'] = -1;
    $variables['items']['system.modules_list']['weight'] = 100;
    $current_path = \Drupal::request()->getRequestUri();
    foreach ($variables['items'] as &$item) {
      if (isset($item['title']) && $item['title'] == "Content") {
        $item['title'] = t("All Content");
      }
      if ($item['url']->toString() == $current_path || strpos($item['url']->toString(), $parent_trail) !== FALSE) {
        $item['in_active_trail'] = TRUE;
        $item['is_active'] = TRUE;
      }
      if (count($item['below'])) {
        _credit_due_menu_process_submenu($item['below'], $item, $current_path, $subparent_trail);
      }
    }
  }
}

/**
 * Set active and active-trail class for sub-menus recursively.
 */
function _credit_due_menu_process_submenu(&$submenu, &$parentitem, $current_path, $subparent_trail = FALSE) {
  foreach ($submenu as &$item) {
    if ($item['url']->toString() == $current_path || strpos($item['url']->toString(), $subparent_trail) !== FALSE) {
      $item['is_active'] = TRUE;
      $parentitem['in_active_trail'] = TRUE;
    }
    elseif (count($item['below'])) {
      _credit_due_menu_process_submenu($item['below'], $item, $current_path, $subparent_trail);
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function credit_due_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function credit_due_theme_suggestions_node_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function credit_due_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function credit_due_theme_suggestions_field_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function credit_due_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_node().
 */
function credit_due_preprocess_node(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function credit_due_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function credit_due_preprocess_form(array &$variables) {

}

/**
 * Implements hook_preprocess_select().
 */
function credit_due_preprocess_select(array &$variables) {

}

/**
 * Implements hook_preprocess_field().
 */
function credit_due_preprocess_field(array &$variables, $hook) {

}

/**
 * Implements hook_preprocess_details().
 */
function credit_due_preprocess_details(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function credit_due_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function credit_due_preprocess_menu_local_task(array &$variables) {

}

/**
 * Implements hook_preprocess_menu_local_tasks().
 */
function credit_due_preprocess_menu_local_tasks(array &$variables) {

}

/**
 * Implements theme_preprocess_page_title().
 */
function credit_due_preprocess_page_title(&$variables) {
  // Remove redundant title from admin pages.
  if (\Drupal::routeMatch()->getParameter('node')) {
    $title = $variables['title'];
    $untranslated_string = $title->getUntranslatedString();
    $arguments = $title->getArguments();
    unset($arguments['@title']);
    $untranslated_string = str_replace('@title', '', $untranslated_string);
    $variables['title'] = t($untranslated_string, $arguments);
  }
}

/**
 * Implements template_preprocess_toolbar().
 */
function credit_due_preprocess_toolbar(&$variables) {
  foreach ($variables['tabs'] as $k => &$v) {
    $v['attributes']->addClass($k . '-tab');
  }
}

/**
 * Implements template_preprocess_links__dropbutton__operations().
 */
function credit_due_preprocess_links__dropbutton__operations(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  if ($route_name == 'system.admin_content') {
    $variables['attributes']['class'] = ['inline-list', 'content-actions'];
  }
}

/**
 * Implements template_preprocess_pager().
 */
function credit_due_preprocess_pager(&$variables) {
  if (isset($variables['items']['first']['text'])) {
    $variables['items']['first']['text'] = '«';
  }
  elseif (count($variables['items']['pages']) > 1) {
    $variables['items']['first_empty']['text'] = '«';
  }

  if (isset($variables['items']['previous']['text'])) {
    $variables['items']['previous']['text'] = '‹';
  }
  elseif (count($variables['items']['pages']) > 1) {
    $variables['items']['previous_empty']['text'] = '‹';
  }
  if (isset($variables['items']['next']['text'])) {
    $variables['items']['next']['text'] = '›';
  }
  elseif (count($variables['items']['pages']) > 1) {
    $variables['items']['next_empty']['text'] = '›';
  }

  if (isset($variables['items']['last']['text'])) {
    $variables['items']['last']['text'] = '»';
  }
  elseif (count($variables['items']['pages']) > 1) {
    $variables['items']['last_empty']['text'] = '»';
  }
}
